entry event packetin (int srcip);
event new_packet (int srcip);
event increase_count (int srcip);
event report_count (int srcip);
exit event packetout (int srcip, int count);

const int TRUE = 1;
const int FALSE = 0;
const int HASH_SEED = 10398247;
const int NUM_IPS = 1024;
global Array.t<<32>> ips = Array.create(NUM_IPS);
global Array.t<<32>> counts = Array.create(NUM_IPS);

memop incr(int memval, int incrval) {
    return memval + incrval;
}

handle new_packet (int srcip) {
    int<<10>> idx = hash<<10>>(HASH_SEED, srcip, NUM_IPS);

    int stored_ip = Array.get(ips, idx);
 
    // keep packet if index hasn't been written to or if it has,
    // if the stored IP is the same as the packet's IP
    if (stored_ip == 0 || stored_ip == srcip) {
        generate increase_count (srcip);
    }
}

handle increase_count (int srcip) {
    int<<10>> idx = hash<<10>>(HASH_SEED, srcip, NUM_IPS);
    Array.setm(counts, idx, incr, 1);
    generate report_count (srcip);
}

handle report_count (int srcip) {
    int<<10>> idx = hash<<10>>(HASH_SEED, srcip, NUM_IPS);
    int count = Array.get(counts, idx);
    generate packetout (srcip, count);
}

handle packetin (int srcip) {
    // ignore packets from IP 10.0.0.1 (167772161)
    if (srcip != 167772161) {
        generate new_packet (srcip);
    }
}
